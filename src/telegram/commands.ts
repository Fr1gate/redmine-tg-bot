import { Context } from "telegraf";
import { currentWeekReport, todayReport } from "../services/reports";
import { getPrisma } from "../services/db";
import { message } from "telegraf/filters";
import { RedmineAPI } from "../api/redmine";

const prisma = getPrisma();

export const TelegramCommands = {
  getHelpResponse() {
    return (
      "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –Ø –∫–∞–∫ –∏ —Ç—ã —Å—Ç—Ä–µ–º–ª—é—Å—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ, –Ω–æ –Ω–∞ —ç—Ç–æ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è...\n" +
      "/today - —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n" +
      "/week - —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"
    );
  },
  async handleToday(ctx: Context, next: Function) {
    if (!ctx.has(message("text"))) return next();

    const user = await prisma.user.findFirst({
      where: {
        telegram_id: String(ctx.update.message.from.id),
      },
    });

    if (user === null || user.redmine_token === null) {
      return; // should never occur
    }

    const report = await todayReport(user.redmine_token);

    void ctx.replyWithMarkdownV2(report);
  },
  async handleWeek(ctx: Context, next: Function) {
    if (!ctx.has(message("text"))) return next();

    const user = await prisma.user.findFirst({
      where: {
        telegram_id: String(ctx.update.message.from.id),
      },
    });

    if (user === null || user.redmine_token === null) {
      return; // should never occur
    }

    const report = await currentWeekReport(user.redmine_token);

    void ctx.replyWithMarkdownV2(report);
  },
  async handleText(ctx: Context, next: Function) {
    if (!ctx.has(message("text"))) return next();

    const telegramId = String(ctx.update.message.from.id);
    const user = await prisma.user.findFirst({
      where: {
        telegram_id: telegramId,
      },
    });
    if (user !== null && user.redmine_token === null) {
      void ctx.reply("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!");
      RedmineAPI.getUser(ctx.message.text)
        .then(async (redmineUser) => {
          void ctx.reply(
            `–£—Ä–∞!! –í—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Ç–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–∞—Å–∞—Ö, ${redmineUser.firstname} ${redmineUser.lastname}`
          );
          await prisma.user.update({
            where: {
              id: user.id,
            },
            data: {
              redmine_token: ctx.message.text,
            },
          });
        })
        .catch(() => {
          void ctx.reply(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Ç—ã —Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω –≤—Å—Ç–∞–≤–∏–ª? –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑"
          );
        });
    } else {
      void ctx.reply("–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∂–º–∏ /help!")
      void next();
    }
  },
  async startHandler(ctx: Context, next: Function) {
    if (!ctx.has(message("text"))) return next();

    const telegramId = String(ctx.update.message.from.id);
    const user = await prisma.user.findFirst({
      where: {
        telegram_id: telegramId,
      },
    });

    if (user == null) {
      await prisma.user.create({
        data: {
          telegram_id: telegramId,
        },
      });

      await ctx.reply(
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç RedmiBot! –í –Ω–∞—à–µ–º —É–±–µ–∂–∏—â–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º Brainstorm –æ–¥–Ω–∏–º –∏–∑ –≥–ª–∞–≤–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —á–∞—Å—ã. –ú—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∏—Ö, –∞ –ø–æ—Ç–æ–º –æ–±–º–µ–Ω–∏–≤–∞–µ–º –Ω–∞ –¥–µ–Ω—å–≥–∏ —É –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –í–µ–¥–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —á–∞—Å–∞—Ö –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã. –Ø –ø–æ–º–æ–≥—É –Ω–µ –∑–∞–±—ã—Ç—å —Ç–µ–±–µ –æ–± –∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏!\n\n" +
          '–£ –Ω–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω—É–∂–Ω–æ —Ç—É–¥–∞ –ø–æ–ø–∞—Å—Ç—å. –ì–ª–∞–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ª–æ–∂–∏–ª –≤ –º–µ–Ω—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–æ: "–ó–∞–π–¥–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Redmine, –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ —Ç–∞–º —Å–ø—Ä–∞–≤–∞ –±—É–¥–µ—Ç –Ω–∞–¥–ø–∏—Å—å: "–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∫ API", –æ–Ω —Ç–æ –Ω–∞–º –∏ –Ω—É–∂–µ–Ω"\n\n' +
          "–ü—Å—Å—Å ü§´, —è —Å–ª—ã—à–∞–ª —á—Ç–æ –º–æ–∂–Ω–æ –∏ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é, –Ω–æ —ç—Ç–æ –Ω–µ —Å–µ–∫—å—é—Ä–Ω–æ, –≤–¥—Ä—É–≥ —è –µ–≥–æ –ø–æ—Ç–µ—Ä—è—é, —Ç–∞–∫ —á—Ç–æ –¥–∞–≤–∞–π –ª—É—á—à–µ —á–µ—Ä–µ–∑ –∫–ª—é—á–∏–∫. –í—Å—Ç–∞–≤—å –µ–≥–æ, –µ—Å–ª–∏ –Ω–∞—à–µ–ª"
      );
    } else {
      await ctx.reply("–¢—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∂–º–∏ /help!");
    }
  },
};
